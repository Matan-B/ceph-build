#!/usr/bin/env bash
set -o errexit
set -o pipefail

if [[ ! -f $WORKSPACE/ceph.zip ]]; then
    echo "ERROR: The Ceph Windows build zip file doesn't exist at $WORKSPACE/ceph.zip"
    exit 1
fi

CEPHADM_RELEASE=${CEPHADM_RELEASE:-"quincy"}
WIN_USERSPACE_CRASH_DUMPS=${WIN_USERSPACE_CRASH_DUMPS:-"C:\\userspace_crash_dumps"}

#
# Install requirements (if needed)
#
if ! sudo docker version &>/dev/null; then
    sudo apt-get update
    sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    sudo usermod -aG docker $USER
fi
if ! which xmllint >/dev/null; then
    sudo apt-get update
    sudo apt-get install -y libxml2-utils
fi

#
# Start minimal Ceph development cluster via cephadm
#
curl -L "https://github.com/ceph/ceph/raw/${CEPHADM_RELEASE}/src/cephadm/cephadm" -o $WORKSPACE/cephadm
chmod +x $WORKSPACE/cephadm
sudo virsh net-dumpxml default > $WORKSPACE/default-net.xml
MON_IP=`xmllint --xpath 'string(/network/ip/@address)' $WORKSPACE/default-net.xml`
sudo rm $WORKSPACE/default-net.xml
sudo $WORKSPACE/cephadm bootstrap --allow-fqdn-hostname --single-host-defaults --mon-ip $MON_IP
HOST_DISTRO=$(lsb_release -cs)
curl -s -L https://shaman.ceph.com/api/repos/ceph/main/latest/ubuntu/$HOST_DISTRO/flavors/default/repo?arch=$(arch) | sudo tee /etc/apt/sources.list.d/ceph.list
sudo $WORKSPACE/cephadm install ceph-common

sudo cp /etc/ceph/ceph.conf $WORKSPACE/ceph.conf
sudo cp /etc/ceph/ceph.client.admin.keyring $WORKSPACE/keyring
sudo chown $USER $WORKSPACE/ceph.conf $WORKSPACE/keyring

sudo ceph osd pool create rbd

#
# Clone ceph-win32-tests repo
#
SSH_TIMEOUT=5m ssh_exec git.exe clone https://github.com/ceph/ceph-win32-tests.git /workspace/repos/ceph-win32-tests

#
# Set Windows user-space crash dumps directory
#
ssh_exec powershell.exe /workspace/repos/ceph-win32-tests/test_host/set_userspace_crashdump_location.ps1 -dumpDir $WIN_USERSPACE_CRASH_DUMPS

#
# Copy the ceph.conf and keyring to the Windows VM
#
ssh_exec powershell.exe mkdir -force /ProgramData/ceph/out
scp_upload $WORKSPACE/ceph.conf /ProgramData/ceph/ceph.conf
scp_upload $WORKSPACE/keyring /ProgramData/ceph/keyring

#
# Setup the Ceph Windows build in the Windows VM
#
SSH_TIMEOUT=5m scp_upload $WORKSPACE/ceph.zip /ceph.zip
SSH_TIMEOUT=10m ssh_exec powershell.exe "\$ProgressPreference='SilentlyContinue'; Expand-Archive -Path /ceph.zip -DestinationPath / -Force"
ssh_exec powershell.exe "New-Service -Name ceph-rbd -BinaryPathName 'c:\ceph\rbd-wnbd.exe service'"
ssh_exec powershell.exe Start-Service -Name ceph-rbd

#
# Collect artifacts on script exit
#
function collect_artifacts() {
    rm -rf $WORKSPACE/artifacts
    mkdir -p $WORKSPACE/artifacts

    scp_download /workspace/test_results $WORKSPACE/artifacts/test_results
    if [[ "$INCLUDE_USERSPACE_CRASH_DUMPS" = true ]]; then
        scp_download /userspace_crash_dumps $WORKSPACE/artifacts/userspace_crash_dumps
    fi
    if [[ "$INCLUDE_CEPH_ZIP" = true ]]; then
        cp $WORKSPACE/ceph.zip $WORKSPACE/artifacts/ceph.zip
    fi
}
trap collect_artifacts EXIT

#
# Run the Windows tests
#
SSH_TIMEOUT=1h ssh_exec powershell.exe /workspace/repos/ceph-win32-tests/test_host/run_tests.ps1 -workerCount 4
