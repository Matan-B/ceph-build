#!/usr/bin/python3
# -*- coding: utf-8 -*-

DOCUMENTATION = """
module: jenkins_node
short_decription: Manage Jenkins nodes
description:
  - This module provides some management features to control Jenkins
    nodes.

options:
  uri:
    description:
      - Base URI for the Jenkins instance
    required: true

  username:
    description:
      - The Jenkins username to log-in with.
    required: true

  password:
    description:
      - The Jenkins password (or API token) to log-in with.
    required: true

  operation:
    description:
      - Operation to perform
    required: false
    default: 'create'
    choices: [ create, delete, enable, disable ]

  name:
    description:
      - Node name
    required: true

  executors:
    description:
      - Number of executors in node
    required: false
    default: 2

  description:
    description:
      - Description of the node
    required: false
    default: null

  label:
    description:
      - List of labels in a string, space-separated, to associate with a node, like "amd64" or "python"
    required: false
    default: null

  exclusive:
    description:
      - Mark this node for tied jobs only
    required: false
    default: 'no'
    choices: ['no', 'yes']

  launcher:
    description:
      - Launcher method for a remote node (only needed for 'create' operations)
    required: false
    default: 'hudson.plugins.sshslaves.SSHLauncher'

  remoteFS:
    description:
      - Path to the directory used for builds
    required: false

  credentialsId:
    description:
      - the ID of the user needed for authentication. Usually found in
        credentials.xml or via the url
	{host}/credential-store/domain/_/credential/{id}. By default this is an
        SSH user account and key (see "launcher" above).

  host:
    description:
      - hostname or IP for the host to connect to the builder

requirements: ['python-jenkins']
author:
    - "Alfredo Deza"

"""

EXAMPLES = """
# Create new node
- name: Create new node
  jenkins_node: uri={{ jenkins_uri }} username={{ user }} password={{ password }}
           name={{ node_name }} operation=create

# Delete an existing node
- name: Delete a node
  jenkins_node: uri={{ jenkins_uri }} username={{ user }} password={{ password }}
           name={{ node_name }} operation=delete
"""
import ast
import traceback
import xmltodict

HAS_JENKINS_API = True
try:
    import jenkins
except ImportError:
    HAS_JENKINS_API = False


def _jenkins(uri, username, password):
    return jenkins.Jenkins(uri, username, password)


def translate_params(params):
    sanitized = {}
    mapping = {
        'executors': 'numExecutors',
        'description': 'nodeDescription',
    }
    for k, v in params.items():
        key = mapping.get(k, k)
        sanitized[key] = v
    return sanitized



#
# it's not clear to me how ansible passes lists as lists,
# so convert them if necessary
#
def maybe_convert_string_to_list(v):
    if isinstance(v, basestring):
        try:
            v = ast.literal_eval(v)
        except Exception:
            # no, really; ast makes a best effort, and if it fails,
            # we didn't need its conversion
            pass
    return v

def sanitize_update_params(kw):

    # this list may be smaller than it needs to be, but these are
    # the only ones I want to support for now
    VALID_UPDATE_PARAMS = {
        # value, if any, is function returning new key and value to use
        'name': None,
        'remoteFS': None,
        'numExecutors': None,
        'label': None,
    }
    update_kws = dict()
    invalid = list()
    for k, v in kw.items():
        if k not in VALID_UPDATE_PARAMS:
            invalid.append(k)
        else:
            if VALID_UPDATE_PARAMS[k]:
                k, v = VALID_UPDATE_PARAMS[k](v)
            update_kws[k] = v
    return invalid, update_kws


def create_or_modify(uri, user, password, name, **kw):
    launcher_params = {}
    launcher_params['credentialsId'] = kw.pop('credentialsId', None)
    launcher_params['host'] = kw.pop('host', None)
    if all(launcher_params.values()) is False:
        launcher_params = {}
    params = translate_params(kw)
    j = _jenkins(uri, user, password)

    if j.node_exists(name):
        # if it already exists, we can reconfigure it

        # select valid config keys, transform a few
        invalid, params = sanitize_update_params(params)

        config = xmltodict.parse(j.get_node_config(name))
        for k, v in params.items():
            config['slave'][k] = v
        new_xconfig = xmltodict.unparse(config)

        j.reconfig_node(name, new_xconfig)
    else:
        if 'label' in params:
            params['labels'] = params['label']
            params.pop('label')
        j.create_node(name, launcher_params=launcher_params, **params)
        if not j.node_exists(name):
            return False, "Failed to create node '%s'." % name

    return True, None


def delete(uri, user, password, name, **kw):
    j = _jenkins(uri, user, password)
    if not j.node_exists(name):
        return False, "Could not delete '%s' - unknown node." % name
    j.delete_node(name)
    if j.node_exists(name):
        return False, "Failed to delete node '%s'." % name
    return True, None


def enable(uri, user, password, name, **kw):
    j = _jenkins(uri, user, password)
    if not j.node_exists(name):
        return False, "Could not enable '%s' - unknown node." % name
    j.enable_node(name)
    return True, None


def disable(uri, user, password, name, **kw):
    j = _jenkins(uri, user, password)
    if not j.node_exists(name):
        return False, "Could not disable '%s' - unknown node." % name
    j.disable_node(name)
    return True, None


def main():
    module = AnsibleModule(
        argument_spec=dict(
            uri=dict(required=True),
            username=dict(required=True),
            password=dict(required=True),
            operation=dict(default='create', choices=['create', 'delete', 'enable', 'disable']),
            name=dict(required=True),
            executors=dict(required=False, default=2),
            description=dict(required=False, default=None),
            label=dict(required=False, default=None),
            host=dict(required=False, default=None),
            credentialsId=dict(required=False, default=None),
            launcher=dict(required=False, default='hudson.plugins.sshslaves.SSHLauncher'),
            remoteFS=dict(required=False, default=None),
            exclusive=dict(required=False, default='no', type='bool'),
        ),
        supports_check_mode=False
    )

    if not HAS_JENKINS_API:
        module.fail_json(msg="Could not import python module: jenkins. Please install the python-jenkins package.")

    uri = module.params['uri']
    username = module.params['username']
    password = module.params['password']
    operation = module.params.get('operation', 'create')
    name = module.params['name']
    executors = module.params['executors']
    description = module.params.get('description')
    label = module.params.get('label')
    exclusive = module.params.get('exclusive', False)
    host = module.params.get('host')
    remoteFS = module.params.get('remoteFS')
    credentialsId = module.params.get('credentialsId')
    launcher = module.params.get('launcher', 'hudson.plugins.sshslaves.SSHLauncher')

    api_calls = {
        'create': create_or_modify,
        'delete': delete,
        'enable': enable,
        'disable': disable
    }

    try:
        func = api_calls[operation]
    except KeyError:
        return module.fail_json(
            msg="operation: %s is not supported. Choose one of: %s'" % (
                operation, str(api_calls.keys()))
        )

    try:
        changed, msg = func(
            uri,
            username,
            password,
            name,
            executors=executors,
            description=description,
            label=label,
            exclusive=exclusive,
            host=host,
            credentialsId=credentialsId,
            launcher=launcher,
            remoteFS=remoteFS,
        )
    except Exception as ex:
        # Ensure that errors going out to Jenkins, specifically the network
        # requests, can be properly translated into meaningful errors so that
        # Ansible can report those back.
        if ex.__class__.__name__ == 'HTTPError':
            msg = "HTTPError %s: %s" % (ex.code, ex.url)
        else:
            message = getattr(ex, 'message', None)
            msg = getattr(ex, 'msg', message)
            if not msg:
                msg = str(ex)
            msg = "%s: %s\n%s" % (ex.__class__.__name__, msg, traceback.format_tb(ex.__traceback__))
        return module.fail_json(msg=msg)

    args = {'changed': changed}
    if msg:
        args['msg'] = msg
    module.exit_json(**args)


# yep, everything: https://docs.ansible.com/developing_modules.html#common-module-boilerplate
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
